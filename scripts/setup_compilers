#!/bin/bash
# This script will configure the path and the compiler variables for the specified compiler.
#
# To use the intel compiler, the environment variable INTELBASE must be set to the path that contains
# the startup script (e.g. /opt/intel/parallel_studio_xe_2019).


###############################################################
# Some helper functions
###############################################################
source helpers.sh

function extractVersion {
	 echo "$($1 --version | grep ^$1 | sed -nr 's/.*\s([0-9]*\.[\.0-9]*).*/\1/p')"
}

# Setup printing
disp_setup $2


# Start the script
for dummy in once;
do


###############################################################
# Display the help if requested
###############################################################
if [ $# == 0 ];
then
	disp "$(basename $0) compiler print\n"
	disp "The compiler to configure (see list below)\n"
	disp "Print is an optional argument for if anything should be printed. When 0, it will disable printing "
	disp "this can be used if this script is called from the bashrc scripts (which may have problems when "
	disp "printing occurs inside of them.\n"
	disp "\n"

	disp "Possible compilers:\n"
	if [ ! -z $(command -v gcc) ];
	then
		GCCVER=$(extractVersion gcc)
		disp "    gcc: $GCCVER\n"
	fi
	if [ ! -z $(command -v clang) ];
	then
		CLANGVER=$(extractVersion clang)
		disp "    clang: $CLANGVER\n"
	fi
	if [ ! -z $(command -v icc) ];
	then
		INTELVER=$(extractVersion icc)
		disp "    intel: $INTELVER\n"
	fi

	break
fi


###############################################################
# Make sure that the user supplied a compiler name
###############################################################
if [ -z $1 ];
then
  disp_err "Must supply a compiler name."
  break
fi


###############################################################
# Make sure that the script has been sourced
###############################################################
(return 0 2>/dev/null) && SOURCED=1 || SOURCED=0
if [ $SOURCED = 0 ]; then
  disp_err "This script must be sourced. Use \"source $(basename "$0")\" instead."
	break
fi


##############################################################
# Choose the compiler executables
##############################################################
case $1 in
gcc)
	disp "Using gcc $(extractVersion gcc)\n"
	COMP="gcc"
	COMPXX="g++"
	;;
clang)
	disp "Using clang $(extractVersion clang)\n"
	COMP="clang"
	COMPXX="clang++"
	;;
intel)
	disp "Using intel compiler $(extractVersion icc)\n"
	COMP="icc"
	COMPXX="icpc"
	;;
*)
	disp_err "Unknown compiler."
	break
	;;
esac


############################################################
# Make sure that the compiler is installed
############################################################
if [ -z $(command -v $COMP) ];
then
  disp_err "The requested C compiler is not installed."
  break
fi

if [ -z $(command -v $COMPXX) ];
then
	disp_err "The requested C++ compiler is not installed."
	break
fi


############################################################
# Do the configuration
############################################################
export CC=$(which $COMP)
export CXX=$(which $COMPXX)


# Exit the script
break
done

if [[ -z $ECODE ]]
then
  ECODE=0
fi
return $ECODE 2> /dev/null || exit $ECODE
