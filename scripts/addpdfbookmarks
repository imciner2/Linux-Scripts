#!/bin/bash



###############################################################
# Figure out the script directory
# Code from: https://www.ostricher.com/2014/10/the-right-way-to-get-the-directory-of-a-bash-script/
###############################################################
get_script_dir () {
  SOURCE="${BASH_SOURCE[0]}"
  # While $SOURCE is a symlink, resolve it
  while [ -h "$SOURCE" ]; do
      DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
      SOURCE="$( readlink "$SOURCE" )"
      # If $SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
      [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  echo "$DIR"
}



###############################################################
# Display the help if requested
###############################################################
if [ $# == 0 ];
then
  printf "$(basename $0) pdfFile bookmarkFile\n"
  printf "This script will replace the bookmarks inside a PDF file with the supplied bookmarks.\n"
  printf "\n"
  printf "The bookmarks must be specified inside a text file containing 3 columns (with tab separation between columns.\n"
  printf "The first column contains the level of the bookmark, with 1 being the highest. The order of the bookmarks dictate\n"
  printf "the nesting of the bookmarks (see the example below). The second column contains the title of the bookmark.\n"
  printf "The third column contains the page number for the bookmark.\n"
  printf "\n"
  printf "Sample bookmark hierarchy:\n"
  printf "    Text file:\n"
  printf "        1\t Section 1 \t\t 1\n"
  printf "        2\t Subsection 1.1 \t 2\n"
  printf "        3\t Subsubsection 1.1.1 \t 3\n"
  printf "        2\t Subsection 1.2 \t 4\n"
  printf "        1\t Section 2\t\t 5\n"
  printf "        2\t Subsection 2.1 \t 6\n"
  printf "\n"
  printf "    Resulting bookmark hierarchy:\n"
  printf "        Document\n"
  printf "            Section 1 (Page 1)\n"
  printf "                Subsection 1.1 (Page 2)\n"
  printf "                    Subsubsection 1.1.1 (Page 3)\n"
  printf "                Subsection 1.2 (Page 4)\n"
  printf "            Section 2 (Page 5)\n"
  printf "                Subsection 2.1 (Page 6)\n"
  printf "\n"

  exit 0
fi



###############################################################
# Determine the software that is installed
###############################################################
COMMAND=0

# Determine if chostscript is installed
GS=$(which gs 2> /dev/null)
if [ ! -z $GS ];
then
  COMMAND=2
fi

# Determine if pdftk is installed, and prefer it over ghostscript
PDFTK=$(which pdftk 2> /dev/null)
if [ ! -z $PDFTK ];
then
  COMMAND=1
fi



###############################################################
# Run the appropriate command
###############################################################
case "$COMMAND" in
1 )
  printf "Using pdftk to add the bookmarks.\n"
  # Use pdftk for the manipulation
  pdftk "$1" dump_data > index.info.original

  # Remove any existing bookmarks from the file
  grep -v Bookmark index.info.original > index.info

  # Loop through the csv and create the bookmark lines
  awk 'BEGIN{FS="\t"}{print "BookmarkBegin\nBookmarkTitle: "$2"\nBookmarkLevel: "$1"\nBookmarkPageNumber: "$3""}' $2 > index.info

  # Add the bookmarks to the file
  pdftk "$1" update_info index.info output output_toc.pdf

  # Remove those intermediate files
  rm index.info.original
  rm index.info
  ;;

2 )
  # Use ghostscript for the manipulation
  printf "Using ghostscript to add the bookmarks.\n"

  # Parse the bookmarks file
  tac $2 | awk -f "$(get_script_dir)/createBooksmarksFile.awk" > marks.ps
  tac marks.ps > reversemarks.ps

  # Call ghostscript to update the bookmarks
  gs -o output.pdf   \
   -sDEVICE=pdfwrite   \
    reversemarks.ps \
   -f $1

  rm marks.ps
  rm reversemarks.ps
  ;;

* )
  # No command was found
  printf "Error: No PDF manipulation command found. Please install either Ghostscript or pdftk\n"
  ;;

esac
